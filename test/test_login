import unittest
from selenium import webdriver
from selenium.webdriver.common.by import By
import time

class TestLoginPage(unittest.TestCase):

    def setUp(self):
        # Configura el driver de Selenium para Chrome
        self.driver = webdriver.Edge()
        self.driver.get("http://localhost:5173/login")  # URL de la página de login en tu entorno local

    def tearDown(self):
        # Cierra el navegador después de la prueba
        self.driver.quit()

    def test_login_with_incorrect_username(self):
        driver = self.driver

        # Llenar el formulario con un usuario incorrecto
        username_input = driver.find_element(By.NAME, "username")
        password_input = driver.find_element(By.NAME, "password")
        submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")

        username_input.send_keys("incorrect_username@domain.com")  # Usuario incorrecto
        password_input.send_keys("pistol")  # Contraseña correcta
        submit_button.click()

        # Esperar para que el sistema procese la solicitud
        time.sleep(2)

        # Verificar que aparece el modal de error
        try:
            modal_error_login = driver.find_element(By.CSS_SELECTOR, ".modal-error-login")  # Asegúrate de que la clase es la correcta
            self.assertTrue(modal_error_login.is_displayed(), "Modal de error no aparece")
        except:
            self.fail("El modal de error no se ha mostrado correctamente")

    def test_login_with_incorrect_password(self):
        driver = self.driver

        # Llenar el formulario con una contraseña incorrecta
        username_input = driver.find_element(By.NAME, "username")
        password_input = driver.find_element(By.NAME, "password")
        submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")

        username_input.send_keys("eve.holt@reqres.in")  # Usuario correcto
        password_input.send_keys("incorrect_password")  # Contraseña incorrecta
        submit_button.click()

        # Esperar para que el sistema procese la solicitud
        time.sleep(2)

        # Verificar que aparece el modal de error
        try:
            modal_error_login = driver.find_element(By.CSS_SELECTOR, ".modal-error-login")  # Asegúrate de que la clase es la correcta
            self.assertTrue(modal_error_login.is_displayed(), "Modal de error no aparece")
        except:
            self.fail("El modal de error no se ha mostrado correctamente")

    def test_login_without_credentials(self):
        driver = self.driver

        # Llenar el formulario sin usuario ni contraseña
        username_input = driver.find_element(By.NAME, "username")
        password_input = driver.find_element(By.NAME, "password")
        submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")

        username_input.send_keys("")  # Deja el usuario vacío
        password_input.send_keys("")  # Deja la contraseña vacía
        submit_button.click()

        # Esperar para que el sistema procese la solicitud
        time.sleep(2)

        # Verificar que aparece el modal de error si no se ingresan credenciales
        try:
            modal_error_login = driver.find_element(By.CSS_SELECTOR, ".modal-error-login")  # Asegúrate de que la clase es la correcta
            self.assertTrue(modal_error_login.is_displayed(), "Modal de error no aparece")
        except:
            self.fail("El modal de error no se ha mostrado correctamente")

    def test_login_with_correct_credentials(self):
        driver = self.driver

        # Llenar el formulario con el usuario y la contraseña correctos
        username_input = driver.find_element(By.NAME, "username")
        password_input = driver.find_element(By.NAME, "password")
        submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")

        username_input.send_keys("eve.holt@reqres.in")  # Usuario correcto
        password_input.send_keys("pistol")  # Contraseña correcta
        submit_button.click()

        # Esperar para que el sistema procese la solicitud
        time.sleep(2)

        # Verificar que aparece el modal de éxito (o lo que sea que ocurra al iniciar sesión correctamente)
        try:
            modal_login = driver.find_element(By.CSS_SELECTOR, ".modal-login")  # Asegúrate de que la clase es la correcta
            self.assertTrue(modal_login.is_displayed(), "Modal de login no aparece")
        except:
            self.fail("El modal de login no se ha mostrado correctamente")


if __name__ == "__main__":
    unittest.main()
